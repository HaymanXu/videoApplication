AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: API to upload download and delete videos from S3 via Lambda

Parameters:
  ExistingInputBucketName:
    Type: String
    Description: The name of the existing S3 bucket to store input video.
  ExistingOutputBucketName:
    Type: String
    Description: The name of the existing S3 bucket to store output video.
  ExistingTranscoderPipelineId:
    Type: String
    Description: The ID of the existing Elastic Transcoder pipeline.

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      BinaryMediaTypes:
        - 'image~1png'
        - 'image~1jpeg'
        - 'application~1octet-stream'

  VideoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda-functions-1.0-SNAPSHOT.jar
      Handler: LambdaCronFunctions.HandlerVideoJava17
      Runtime: java17
      Description: Java function
      MemorySize: 2048
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref ExistingInputBucketName
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource: !Sub 'arn:aws:s3:::${ExistingInputBucketName}/*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}:*'
      Tracing: Active
      Events:
        PostVideoEvent:
          Type: Api
          Properties:
            Path: /video/{bucketName}/{fileName}
            Method: POST
            RestApiId:
              Ref: MyApi
        GetVideoEvent:
          Type: Api
          Properties:
            Path: /video/{bucketName}/{fileName}
            Method: GET
            RestApiId:
              Ref: MyApi
        DeleteVideoEvent:
          Type: Api
          Properties:
            Path: /video/{bucketName}/{fileName}
            Method: DELETE
            RestApiId:
              Ref: MyApi

  TranscoderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: LambdaCronFunctions.TranscoderHandler
      Runtime: java17
      CodeUri: target/lambda-functions-1.0-SNAPSHOT.jar
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_ID: !Ref ExistingTranscoderPipelineId
          OUTPUT_BUCKET: !Ref ExistingOutputBucketName
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              - Fn::Sub: arn:aws:s3:::${ExistingInputBucketName}/*
              - Fn::Sub: arn:aws:s3:::${ExistingOutputBucketName}/*
        - Statement:
            Effect: Allow
            Action:
              - elastictranscoder:*
            Resource: "*"

Outputs:
  TranscoderFunctionArn:
    Description: "ARN of the Transcode function"
    Value: !GetAtt TranscoderFunction.Arn